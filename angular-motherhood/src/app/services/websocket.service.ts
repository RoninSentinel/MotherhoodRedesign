import { Injectable } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { CrewMemberShiftLineTimeBlocksModel, FlightOrdersModel, ShiftTemplateInstanceModel } from '../model-types';
import { AlertService } from '../shared/components/alert-notifications';
import { FlightOrderService } from './flight-order.service';
import { MotherhoodSchedulerService } from './motherhood-scheduler.service';

interface BroadcastMessage {
  _uuid: string;
  _date: string;  // Keep date as a string type for easier comparison.
  _squadron: string;
  _shift: string;
  _model: string;
  data: string;
}

@Injectable({
  providedIn: 'root'
})
export class WebsocketService {

  private messageToBroadcastChange: Subject<BroadcastMessage> = new Subject<BroadcastMessage>();
  messageToBroadcast$: Observable<BroadcastMessage> = this.messageToBroadcastChange.asObservable();

  constructor(
    private motherhoodSchedulerService: MotherhoodSchedulerService,
    private flightOrdersService: FlightOrderService, 
    protected alertService: AlertService,
  ) { }

  messageProcessor(broadcastEvent, message) {
    let uuid: string = this.motherhoodSchedulerService.getUUID();
    let date: string = this.motherhoodSchedulerService.getCurrentDate().toISOString();
    let squadron: string = this.motherhoodSchedulerService.getCurrentSquadron();
    let shift: string = this.motherhoodSchedulerService.getCurrentShift();

    let broadcastMessage: BroadcastMessage = message;
    if (broadcastMessage._date == date && broadcastMessage._squadron == squadron && broadcastMessage._shift == shift) {
      // Message applies to the current schedule/shift - process message, ignoring everything else.
      if (broadcastEvent == "published") {

        if (broadcastMessage._uuid == uuid) {
          // Message received was generated by self.
  
        } else {
          // Message received was generated from another user.
          switch(broadcastMessage._model) {
            case "ShiftTemplateInstances":
              let shiftTemplateInstance: ShiftTemplateInstanceModel = JSON.parse(broadcastMessage.data);
              this.motherhoodSchedulerService.loadWithShiftTemplateInstance(shiftTemplateInstance);
              this.alertService.info("Motherhood published.  Schedule updated.", { 'autoClose': true });
              break;
    
            case "FlightOrders":
              let flightOrders: FlightOrdersModel[] = JSON.parse(broadcastMessage.data);
              this.flightOrdersService.setFlightOrders(flightOrders);
              break;
    
            default:
              // Not supported.
          }
        }
      } else if (broadcastEvent == "notifications") {

        if (broadcastMessage._uuid == uuid) {
          // Message received was generated by self.
  
        } else {
          // Message received was generated from another user.
          switch(broadcastMessage._model) {
            case "EditModeEnabled":
              if (this.motherhoodSchedulerService.editMode) {
                this.alertService.info(broadcastMessage.data, { 'autoClose': true });

                this.generateMessageToBroadcast("EditModeResponse", "Another user is currently in edit mode.");
              }
              break;

            case "EditModeDisabled":
              if (this.motherhoodSchedulerService.editMode) {
                this.alertService.info(broadcastMessage.data, { 'autoClose': true });
              }
              break;

            case "EditModeResponse":
              if (this.motherhoodSchedulerService.editMode) {
                this.alertService.info(broadcastMessage.data, { 'autoClose': true });
              }
    
            default:
              // Not supported.
          }
        }
      }
    } 
  }

  generateMessageToBroadcast(model: string, data: string) {
    let uuid: string = this.motherhoodSchedulerService.getUUID();
    let date: string = this.motherhoodSchedulerService.getCurrentDate().toISOString();
    let squadron: string = this.motherhoodSchedulerService.getCurrentSquadron();
    let shift: string = this.motherhoodSchedulerService.getCurrentShift();

    let message: BroadcastMessage = {_uuid: uuid, _date: date, _squadron: squadron, _shift: shift, _model: model, data: data};
    this.messageToBroadcastChange.next(message);
  }
}
